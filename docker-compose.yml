services:
  frontend:
    build: ./frontend
    container_name: frontend_c
    ports:
      - '8001:80'
    stdin_open: true
    tty: true
    restart: unless-stopped
    env_file:
      - ./frontend/.env
    networks:
      - app-network
    labels:
      - "traefik.http.routers.site.rule=Host(`${DOMAIN}`) || Host(`www.${DOMAIN}`)"
    depends_on:
      - traefik

  backend:
    build: ./backend
    container_name: backend_c
    restart: unless-stopped
    depends_on:
      traefik:
        condition: service_started
      postgres: 
          condition: service_healthy
    ports:
      - '8000:8000'
    env_file:
      - ./backend/.env
    networks:
      - app-network
    labels:
      - "traefik.http.routers.site.rule=(Host(`${DOMAIN}`) && PathPrefix(`/docs`))"
      - "traefik.http.routers.site.rule=(Host(`${DOMAIN}`) && PathPrefix(`/redoc`))"
      - "traefik.http.routers.site.rule=(Host(`${DOMAIN}`) && PathPrefix(`/api`))"

  postgres:
    image: postgres:16.3
    container_name: postgres_c
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 10
    volumes:
      - postgress-db:/var/lib/postgresql/data
    env_file:
      - ./backend/.env
    ports:
      - '5432:5432'
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "pg_isready", "-q", "-d", "postgres", "-U", "postgres"]
      interval: 10s
      retries: 3
      timeout: 5s

  adminer:
    image: adminer
    restart: always
    depends_on:
      - postgres
      - traefik
    ports:
      - 8080:8080
    networks:
      - app-network
    labels:
      - "traefik.http.routers.site.rule=Host(`db.${DOMAIN}`)" 

  traefik:
    image: traefik:v3.0.4
    command: --api.insecure=true --providers.docker
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80/ || exit 1"]
      interval: 10s
      retries: 3
      timeout: 5s
    ports:
      - '80:80'
      - '443:443'
      - '8090:8090'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./letsencrypt:/letsencrypt
    env_file:
      - ./backend/.env
    labels:
      - "traefik.http.routers.site.rule=Host(`proxy.${DOMAIN}`)"

volumes:
  postgress-db:  
  letsencrypt:

networks:
  app-network: