services:
  frontend:
    build: ./frontend
    stdin_open: true
    tty: true
    restart: unless-stopped
    ports:
      - '5173:5173'
    env_file:
      - ./frontend/.env
      - ./.env
    networks:
      - app-network
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=app-network"
      - "traefik.http.routers.frontend.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.frontend.entrypoints=web"
      - "traefik.http.routers.frontend-secure.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.frontend-secure.entrypoints=websecure"
      - "traefik.http.routers.frontend-secure.tls=true"
      - "traefik.http.routers.frontend-secure.tls.certresolver=letsencryptresolver"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.routers.frontend.middlewares=redirect-to-https"
      - "traefik.http.services.frontend.loadbalancer.server.port=5173"

  backend:
    build: ./backend
    container_name: backend_c
    restart: unless-stopped
    ports:
      - '8000:8000'
    depends_on:
      - traefik
      - postgres
    env_file:
      - ./backend/.env
      - ./.env
    networks:
      - app-network
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=app-network"
      - "traefik.http.routers.backend-api.rule=Host(`${DOMAIN}`) && PathPrefix(`/api`)"
      - "traefik.http.routers.backend-api.entrypoints=web"
      - "traefik.http.routers.backend-api-secure.rule=Host(`${DOMAIN}`) && PathPrefix(`/api`)"
      - "traefik.http.routers.backend-api-secure.entrypoints=websecure"
      - "traefik.http.routers.backend-api-secure.tls=true"
      - "traefik.http.routers.backend-api-secure.tls.certresolver=letsencryptresolver"
      - "traefik.http.routers.backend-docs.rule=Host(`${DOMAIN}`) && PathPrefix(`/docs`)"
      - "traefik.http.routers.backend-docs.entrypoints=web"
      - "traefik.http.routers.backend-docs-secure.rule=Host(`${DOMAIN}`) && PathPrefix(`/docs`)"
      - "traefik.http.routers.backend-docs-secure.entrypoints=websecure"
      - "traefik.http.routers.backend-docs-secure.tls=true"
      - "traefik.http.routers.backend-docs-secure.tls.certresolver=letsencryptresolver"
      - "traefik.http.routers.backend-redoc.rule=Host(`${DOMAIN}`) && PathPrefix(`/redoc`)"
      - "traefik.http.routers.backend-redoc.entrypoints=web"
      - "traefik.http.routers.backend-redoc-secure.rule=Host(`${DOMAIN}`) && PathPrefix(`/redoc`)"
      - "traefik.http.routers.backend-redoc-secure.entrypoints=websecure"
      - "traefik.http.routers.backend-redoc-secure.tls=true"
      - "traefik.http.routers.backend-redoc-secure.tls.certresolver=letsencryptresolver"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.routers.backend-api.middlewares=redirect-to-https"
      - "traefik.http.routers.backend-docs.middlewares=redirect-to-https"
      - "traefik.http.routers.backend-redoc.middlewares=redirect-to-https"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"

  postgres:
    image: postgres:16.3
    container_name: postgres_c
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 10
    volumes:
      - postgress-db:/var/lib/postgresql/data
    env_file:
      - ./backend/.env
      - ./.env
    ports:
      - '5432:5432'
    networks:
      - app-network

  adminer:
    image: adminer
    restart: always
    ports:
      - '8080:8080'
    depends_on:
      - postgres
      - traefik
    networks:
      - app-network
    env_file:
      - ./backend/.env
      - ./.env
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=app-network"
      - "traefik.http.routers.adminer.rule=Host(`db.${DOMAIN}`)"
      - "traefik.http.routers.adminer.entrypoints=web"
      - "traefik.http.routers.adminer-secure.rule=Host(`db.${DOMAIN}`)"
      - "traefik.http.routers.adminer-secure.entrypoints=websecure"
      - "traefik.http.routers.adminer-secure.tls=true"
      - "traefik.http.routers.adminer-secure.tls.certresolver=letsencryptresolver"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.routers.adminer.middlewares=redirect-to-https"
      - "traefik.http.services.adminer.loadbalancer.server.port=8080"

  traefik:
    image: traefik:v3.0.4
    command:
      - --api.insecure=true
      - --providers.docker
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.letsencryptresolver.acme.tlschallenge=true
      - --certificatesresolvers.letsencryptresolver.acme.email=rtmabiola@gmail.com
      - --certificatesresolvers.letsencryptresolver.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.letsencryptresolver.acme.caserver=https://acme-v02.api.letsencrypt.org/directory
      - --accesslog
      - --api
      - --log
    ports:
      - '80:80'
      - '443:443'
      - '8090:8090'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./letsencrypt:/letsencrypt
    networks:
      - app-network
    env_file:
      - ./.env
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=app-network"
      - "traefik.http.routers.traefik.rule=Host(`proxy.${DOMAIN}`)"
      - "traefik.http.routers.traefik.entrypoints=web"
      - "traefik.http.routers.traefik-secure.rule=Host(`proxy.${DOMAIN}`)"
      - "traefik.http.routers.traefik-secure.entrypoints=websecure"
      - "traefik.http.routers.traefik-secure.tls=true"
      - "traefik.http.routers.traefik-secure.tls.certresolver=letsencryptresolver"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.routers.traefik.middlewares=redirect-to-https"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"

volumes:
  postgress-db:
  letsencrypt:

networks:
  app-network:
    external: true
